1+2
set.seed(2)
rnorm(8)
rnorm(2)
set.seed(2)
rnorm(4)
set.seed(2)
x10 <- rnorm(10)
rm(list-ls())
mean(x1000)
sd.out(sd(x10))
all.sds
sd(x10)
sd(x100)
sd(x100)
sd(x1000)
max.puppies <- 1
hometown <- 'Redwood City'
my.name <- 'Mariah'
height <- '5 feet and 1 inch'
puppies <- 1
puppy.price <- 800
total.cost <- 800
too.expensive <- total.cost > 1000
max.puppies <- 1
my.height
my.height
my.name
my.height
puppies
my.height <- 61 #inches
my.height
budget <- 1000
budget
too.expensive <- total.cost > budget
too.expensive
max.puppies <- budget / puppy.price
max.puppies
budget
puppy.price
puppy.price <- 300
max.puppies
max.puppies <- budget / puppy.price
max.puppies
AddThree
AddThree <-(a) {
return (a + 3)
}
AddThree <- function(a) {
return (a + 3)
}
# Write a function `AddThree` that adds 3 to an input value
AddThree <- function(a) {
return (a + 3)
}
AddThree(3)
ten <- AddThree(7)
ten
FeetToMeters <-function(feet) {
return(feet * 0.3048)
}
height.in.feet <- 61
height.in.meters <- FeetToMeters(height.in.feet)
first.ten <- c(10:20)
next.ten <- c(21:30)
all.numbers <- first.ten + next.ten
all.numbers <- c(first.ten, next.ten)
elevent <- all.numbers[11]
some.numbers <- all.numbers[2:5]
CompareLenght <- function(a, b){
return 'The difference in lengths is N'
}
CompareLenght <- function(a, b){
return "The difference in lengths is N"
}
CompareLenght <- function(a, b){
return (The difference in lengths is N)
}
CompareLenght <- function(a, b){
return ("The difference in lengths is N")
}
a <- c(1:4)
b <- c(1:6)
a
b
DescribeDifference <- function(a, b){
if (a > b) return("Your first vector is longer by N elements")
else return("Your second vector is longer by N elements")
}
return()
return()
c <- c(2:7)
d <- c(3:6)
c
d
DescribeDifference <- function(c, d){
if (c > d){
return(paste("Your first vector is longer by N elements"))
} else {
return(paste("Your second vector is longer by N elements"))
}
}
return
DesribeDifference
DescribeDifference
CompareLenght <- function(a, b){
if (a > b) {
N <- length(a) - length(b)
} else {
N <- length(b) - length(a)
}
return (paste("The difference in lengths is"), N)
}
N
DescribeDifference(1:10, 3:12)
CompareLength(c(1:3), 1:8)
library(jsonlite)
library(httr)
base.url <- "http://www.omdbapi.com/?"
movie <- "The Adjustment Bureau"
request <- GET(base.url, query = query.parameters)
query.parameters <- list(t= movie, r="json")
request <- GET(base.url, query = query.parameters)
body <- content(request, "text")
movie.data <- fromJSON(body)
movie.df <- as.data.frame(movie.data)
Director <- function(movies) {
result <- paste(movies$Title, "was directed by", movies$Director)
return (result)
}
movie.directory <- Director(movie.df)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("~/")
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
data <- womensrole
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
#Load the dataset 'womensrole' from the HSUAR package (same way you would load a built in dataset)
data <- womensrole
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
library(HSAUR)
install.packages('HSAUR')
library(HSAUR)
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
data <- womensrole
ggplot(plot.data, aes(x=education, y=thoughts, color=factor(sex))) + geom_point()
#INFO 201 M18 Exercise 5 Server
install.packages('HSAUR')
#Require the following: shiny, HSUAR, dyplr, and ggplot2
library(shiny)
library(HSAUR)
library(dplyr)
library(ggplot2)
#Load the dataset 'womensrole' from the HSUAR package (same way you would load a built in dataset)
data <- womensrole
#Here you will define the data that is shown based on your inputs defined in the UI
#and turn it into an output plot
#Hint: reference the input values using 'input$inputID'
shinyServer(function(input, output) {
#plotNameHere will become what you named your plot in the UI
output$plotNamehere <- renderPlot({
#Here use your different input values to define what data is used to render your plot
#The x axis will be the level of education
#The y axis will be the level of agreement or disagreement
#The dataset used will be filtered by sex
#Filter the dataset based on whether the input is Men, Women, or Both
if(input$sex == "Men") {
plot.dataset <- data %>% filter(sex == "Male")
} else if (input$sex == "Women") {
plot.dataset <- data %>% filter(sex == "Female")
} else {
plot.dataset <- data
}
#Define a y axis value based on the input Agree or Disagree
if(input$thoughts == "Agree") {
thoughts = plot.dataset$agree
} else {
thoughts = plot.dataset$disagree
}
#Using the values you just defined, construct a scatterplot using ggplot2
#x will be defined by education, y by agree/disagree
#Bonus: Factor the color field by sex
#(this will allow you to visually see the difference between Men and Women when Both are selected)
ggplot(plot.dataset, aes(x=education, y=thoughts, color=factor(sex))) + geom_point()
})
})
shinyServer(function(input, output) {
#plotNameHere will become what you named your plot in the UI
output$plotNamehere <- renderPlot({
#Here use your different input values to define what data is used to render your plot
#The x axis will be the level of education
#The y axis will be the level of agreement or disagreement
#The dataset used will be filtered by sex
#Filter the dataset based on whether the input is Men, Women, or Both
if(input$sex == "Men") {
plot.dataset <- data %>% filter(sex == "Male")
} else if (input$sex == "Women") {
plot.dataset <- data %>% filter(sex == "Female")
} else {
plot.dataset <- data
}
#Define a y axis value based on the input Agree or Disagree
if(input$thoughts == "Agree") {
thoughts = plot.dataset$agree
} else {
thoughts = plot.dataset$disagree
}
#Using the values you just defined, construct a scatterplot using ggplot2
#x will be defined by education, y by agree/disagree
#Bonus: Factor the color field by sex
#(this will allow you to visually see the difference between Men and Women when Both are selected)
ggplot(plot.dataset, aes(x=education, y=thoughts, color=factor(sex))) + geom_point()
})
})
library(shiny)
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("The Role of Females in Society"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
selectInput(inputId = "sex",
label = "Sex:",
choices = c("Men", "Women", "Both"),
selected = "Both"),
#selectInput for Agree or Disagree
#inputID = thoughts
selectInput(inputId = "thoughts",
label = "Who:",
choices = c("Agree", "Disagree"),
selected= "Agree")
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("The Role of Females in Society"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
selectInput(inputId = "sex",
label = "Sex:",
choices = c("Men", "Women", "Both"),
selected = "Both"),
#selectInput for Agree or Disagree
#inputID = thoughts
selectInput(inputId = "thoughts",
label = "Who:",
choices = c("Agree", "Disagree"),
selected= "Agree")
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
getwd
getwd()
setwd("~/Desktop/info201hw/INFO201_Final_Project")
setwd("~/Desktop/info201hw/INFO201_Final_Project/script")
shiny::runApp('~/Desktop/info201hw/INFO201_Final_Project')
CircleGraph(df,"None")
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
# Circular one
CircleGraph <- function(dataset, variable) {
my.data <- group_by(dataset, SEX, ID) %>%
summarize(count = n())
my.data <- my.data[!(is.na(my.data$SEX) | my.data$SEX == "" | my.data$ID == ""), ]
total <- group_by(my.data, SEX) %>%
summarize(sum = sum(count))
colnames(total) <- c("Sex","total")
secret.data <- filter(my.data, ID == "Secret Identity") %>%
select(SEX,count)
colnames(secret.data) <- c("Sex","Secret")
public.data <- filter(my.data, ID == "Public Identity") %>%
select(SEX,count)
colnames(public.data) <- c("Sex","Public")
none.data <- filter(my.data, ID == "No Dual Identity") %>%
select(SEX,count)
colnames(none.data) <- c("Sex","None")
known.data <- filter(my.data, ID == "Known to Authorities Identity") %>%
select(SEX, count)
colnames(known.data) <- c("Sex", "Known")
table <- left_join(secret.data, public.data, by= "Sex") %>%
left_join(none.data, by="Sex") %>%
left_join(known.data, by="Sex") %>%
left_join(total, by="Sex")
pcnt <- data.frame(c("Female","Male"),
round(table$Secret/table$total * 100, digit = 0),
round(table$Public/table$total * 100, digit = 0),
round(table$None/table$total * 100, digit = 0),
round(table$Known/table$total * 100, digit = 0))
colnames(pcnt) <- c("Gender","Secret", "Public", "None", "Known")
circular <- ggplot(pcnt, aes(x = Gender, y = eval(parse(text = variable)), fill = Gender)) +
geom_bar(width = 0.85, stat = "identity") +
# To use a polar plot and not a basic b arplot
coord_polar(theta = "y") +
#Remove useless labels of axis
xlab("") + ylab("") +
#Increase ylim to avoid having a complete circle
ylim(c(0,75)) +
#Add group labels close to the bars :
geom_text(data = pcnt, hjust = 1, size = 4, aes(x = Gender, y = 0, label = Gender)) +
#Remove useless legend, y axis ticks and y axis text
theme(legend.position = "none" , axis.text.y = element_blank() , axis.ticks = element_blank()) +
ggtitle(paste("Proportion of each gender for ", as.character(variable), "ID")) +
scale_fill_manual("legend", values = c("Male" = "blue", "Female" = "pink")) +
theme(plot.title = element_text(size=22)) +
theme(plot.title = element_text(hjust = 0.5))
return(circular)
}
# Server-side of webpage
library(plotly)
library(dplyr)
library(png)
source("./script/chart_year_sexualMinority.R")
source("./script/gender_characteristics.R")
source('./script/genderID.R')
df <- read.csv("data/marvel-wikia-data.csv", stringsAsFactors = FALSE)
marvel.data <- read.csv("data/marvel-wikia-data.csv", stringsAsFactors = FALSE)
colnames(marvel.data)[13]  <- "YEAR"
dc.data <- read.csv("data/dc-wikia-data.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
# GSM Tab
output$year_gsm <- renderPlotly({
# Show only selected gender. *** = all possible genders
gender.selected <- input$gender
if(gender.selected != "***") {
marvel.data <- marvel.data %>% filter(SEX == gender.selected)
}
return(YearSexuality(marvel.data))
})
output$table_gsm <- renderTable({
return(GSMtable(marvel.data))
})
# Gender vs Characteristics Tab
output$circularPlot <- renderPlot({
char_selected <- input$char
return(GenderCharacteristic(marvel.data,char_selected))
})
output$table <- renderTable({
return(GC_table(marvel.data))
})
output$summary <- renderText({
return(GC_Summary())
})
# Another Tab functions here
output$circularPlot <- renderPlot({
selection <- input$variable
graph <- CircleGraph(df, selection)
return(graph)
})
})
# User-interface of our webpage
library(shiny)
library(plotly)
library(ggplot2)
source("./script/chart_year_sexualMinority.R")
source("./script/introduction.R")
shinyUI(navbarPage(
"Comic Book Character Diversity",
# Introduction Tab
tabPanel("Introduction",
fluidPage(
titlePanel("Introduction"),
mainPanel(h3(Intro()))
)),
# GSM and LGBT Tab
tabPanel("LGBT Community",
fluidPage(
titlePanel("Comic Characters in the LGBT Community"),
# Sidebar with drop-down box widget, select gender
sidebarLayout(
sidebarPanel(selectInput(
"gender",
"Gender:",
choices = list(
"All" = "***",
"Female" = "Female Characters",
"Male" = "Male Characters",
"Agender" = "Agender Characters"
)
)),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Intro",
h2("Introduction:"),
h4(GSMintro())
),
tabPanel("Graph",
plotlyOutput("year_gsm")),
tabPanel("Table",
tableOutput("table_gsm")),
tabPanel("Summary",
h2("Summary:"),
h4(GSMoutro())
)
)
)
)
)),
# Gender Characteristics Tabs
tabPanel("Gender Characteristics",
fluidPage(
# Application title
titlePanel("Gender vs Characteristic"),
sidebarLayout(
sidebarPanel(
radioButtons("char", "Characteristic type:",
c("Good Character" = "Good",
"Bad Character" = "Bad",
"Neutral Character" = "Neutral")
)
),
# Show a tabset that includes a plot, summary, and table view
# of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("circularPlot")),
tabPanel("Table", tableOutput("table")),
tabPanel("Summary", verbatimTextOutput("summary"))
)
)
)
)),
# Other Tabs
tabPanel('Gender and ID',
fluidPage(
# Application title
titlePanel('Gender vs ID'),
# Sidebar with a select input for variables
sidebarLayout(
sidebarPanel(
selectInput("variable", label = 'ID', choices = list("Secret Identity" = "Secret",
"Public Identity" = "Public",
"No Dual Identity" = "None",
"Known to Authorities Identity" = "Known"))
),
# Suumary and Conclusion
mainPanel(
h2("Introduction:"),
h4("This dataset is to show how gender affects the how a character identifies with their ID."),
plotlyOutput("circularPlot"),
h2("Conclusion:"),
h4("In conclusion this dataset shows that the male characetrs are featured more than female characters.")
)
)
)
),
tabPanel("Test tab",
fluidPage(
titlePanel("Test text")
))
))
CircleGraph(df,"None")
